{"ast":null,"code":"import { getApp, _getProvider, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\nconst name = \"@firebase/installations\";\nconst version = \"0.5.12\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst PENDING_TIMEOUT_MS = 10000;\nconst PACKAGE_VERSION = `w:${version}`;\nconst INTERNAL_AUTH_VERSION = 'FIS_v2';\nconst INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';\nconst TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nconst SERVICE = 'installations';\nconst SERVICE_NAME = 'Installations';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst ERROR_DESCRIPTION_MAP = {\n  [\"missing-app-config-values\"\n  /* MISSING_APP_CONFIG_VALUES */\n  ]: 'Missing App configuration value: \"{$valueName}\"',\n  [\"not-registered\"\n  /* NOT_REGISTERED */\n  ]: 'Firebase Installation is not registered.',\n  [\"installation-not-found\"\n  /* INSTALLATION_NOT_FOUND */\n  ]: 'Firebase Installation not found.',\n  [\"request-failed\"\n  /* REQUEST_FAILED */\n  ]: '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\n  [\"app-offline\"\n  /* APP_OFFLINE */\n  ]: 'Could not process request. Application offline.',\n  [\"delete-pending-registration\"\n  /* DELETE_PENDING_REGISTRATION */\n  ]: \"Can't delete installation while there is a pending registration request.\"\n};\nconst ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\n\nfunction isServerError(error) {\n  return error instanceof FirebaseError && error.code.includes(\"request-failed\"\n  /* REQUEST_FAILED */\n  );\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction getInstallationsEndpoint(_ref) {\n  let {\n    projectId\n  } = _ref;\n  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\n\nfunction extractAuthTokenInfoFromResponse(response) {\n  return {\n    token: response.token,\n    requestStatus: 2\n    /* COMPLETED */\n    ,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nasync function getErrorFromResponse(requestName, response) {\n  const responseJson = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(\"request-failed\"\n  /* REQUEST_FAILED */\n  , {\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n  });\n}\n\nfunction getHeaders(_ref2) {\n  let {\n    apiKey\n  } = _ref2;\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nfunction getHeadersWithAuth(appConfig, _ref3) {\n  let {\n    refreshToken\n  } = _ref3;\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n/**\r\n * Calls the passed in fetch wrapper and returns the response.\r\n * If the returned response has a status of 5xx, re-runs the function once and\r\n * returns the response.\r\n */\n\n\nasync function retryIfServerError(fn) {\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) {\n    // Internal Server Error. Retry request.\n    return fn();\n  }\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn) {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken) {\n  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nasync function createInstallationRequest(_ref4, _ref5) {\n  let {\n    appConfig,\n    heartbeatServiceProvider\n  } = _ref4;\n  let {\n    fid\n  } = _ref5;\n  const endpoint = getInstallationsEndpoint(appConfig);\n  const headers = getHeaders(appConfig); // If heartbeat service exists, add the heartbeat string to the header.\n\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n  };\n  const request = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n\n  if (response.ok) {\n    const responseValue = await response.json();\n    const registeredInstallationEntry = {\n      fid: responseValue.fid || fid,\n      registrationStatus: 2\n      /* COMPLETED */\n      ,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n    };\n    return registeredInstallationEntry;\n  } else {\n    throw await getErrorFromResponse('Create Installation', response);\n  }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Returns a promise that resolves after given time passes. */\n\n\nfunction sleep(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction bufferToBase64UrlSafe(array) {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nconst INVALID_FID = '';\n/**\r\n * Generates a new FID using random values from Web Crypto API.\r\n * Returns an empty string if FID generation fails for any reason.\r\n */\n\nfunction generateFid() {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto = self.crypto || self.msCrypto;\n    crypto.getRandomValues(fidByteArray); // Replace the first 4 random bits with the constant FID header of 0b0111.\n\n    fidByteArray[0] = 0b01110000 + fidByteArray[0] % 0b00010000;\n    const fid = encode(fidByteArray);\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch (_a) {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n/** Converts a FID Uint8Array to a base64 string representation. */\n\n\nfunction encode(fidByteArray) {\n  const b64String = bufferToBase64UrlSafe(fidByteArray); // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n\n  return b64String.substr(0, 22);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Returns a string key that can be used to identify the app. */\n\n\nfunction getKey(appConfig) {\n  return `${appConfig.appName}!${appConfig.appId}`;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst fidChangeCallbacks = new Map();\n/**\r\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\r\n * change to other tabs.\r\n */\n\nfunction fidChanged(appConfig, fid) {\n  const key = getKey(appConfig);\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nfunction addCallback(appConfig, callback) {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n  const key = getKey(appConfig);\n  let callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n\n  callbackSet.add(callback);\n}\n\nfunction removeCallback(appConfig, callback) {\n  const key = getKey(appConfig);\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    return;\n  }\n\n  callbackSet.delete(callback);\n\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  } // Close broadcast channel if there are no more callbacks.\n\n\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key, fid) {\n  const callbacks = fidChangeCallbacks.get(key);\n\n  if (!callbacks) {\n    return;\n  }\n\n  for (const callback of callbacks) {\n    callback(fid);\n  }\n}\n\nfunction broadcastFidChange(key, fid) {\n  const channel = getBroadcastChannel();\n\n  if (channel) {\n    channel.postMessage({\n      key,\n      fid\n    });\n  }\n\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\n\nfunction getBroadcastChannel() {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n\n    broadcastChannel.onmessage = e => {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel() {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\nlet dbPromise = null;\n\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(OBJECT_STORE_NAME);\n        }\n      }\n    });\n  }\n\n  return dbPromise;\n}\n/** Assigns or overwrites the record for the given key with the given value. */\n\n\nasync function set(appConfig, value) {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = await objectStore.get(key);\n  await objectStore.put(value, key);\n  await tx.done;\n\n  if (!oldValue || oldValue.fid !== value.fid) {\n    fidChanged(appConfig, value.fid);\n  }\n\n  return value;\n}\n/** Removes record(s) from the objectStore that match the given key. */\n\n\nasync function remove(appConfig) {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.done;\n}\n/**\r\n * Atomically updates a record with the result of updateFn, which gets\r\n * called with the current value. If newValue is undefined, the record is\r\n * deleted instead.\r\n * @return Updated value\r\n */\n\n\nasync function update(appConfig, updateFn) {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = await store.get(key);\n  const newValue = updateFn(oldValue);\n\n  if (newValue === undefined) {\n    await store.delete(key);\n  } else {\n    await store.put(newValue, key);\n  }\n\n  await tx.done;\n\n  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n    fidChanged(appConfig, newValue.fid);\n  }\n\n  return newValue;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Updates and returns the InstallationEntry from the database.\r\n * Also triggers a registration request if it is necessary and possible.\r\n */\n\n\nasync function getInstallationEntry(installations) {\n  let registrationPromise;\n  const installationEntry = await update(installations.appConfig, oldEntry => {\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(installations, installationEntry);\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n  });\n\n  if (installationEntry.fid === INVALID_FID) {\n    // FID generation failed. Waiting for the FID from the server.\n    return {\n      installationEntry: await registrationPromise\n    };\n  }\n\n  return {\n    installationEntry,\n    registrationPromise\n  };\n}\n/**\r\n * Creates a new Installation Entry if one does not exist.\r\n * Also clears timed out pending requests.\r\n */\n\n\nfunction updateOrCreateInstallationEntry(oldEntry) {\n  const entry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: 0\n    /* NOT_STARTED */\n\n  };\n  return clearTimedOutRequest(entry);\n}\n/**\r\n * If the Firebase Installation is not registered yet, this will trigger the\r\n * registration and return an InProgressInstallationEntry.\r\n *\r\n * If registrationPromise does not exist, the installationEntry is guaranteed\r\n * to be registered.\r\n */\n\n\nfunction triggerRegistrationIfNecessary(installations, installationEntry) {\n  if (installationEntry.registrationStatus === 0\n  /* NOT_STARTED */\n  ) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create(\"app-offline\"\n      /* APP_OFFLINE */\n      ));\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    } // Try registering. Change status to IN_PROGRESS.\n\n\n    const inProgressEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: 1\n      /* IN_PROGRESS */\n      ,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(installations, inProgressEntry);\n    return {\n      installationEntry: inProgressEntry,\n      registrationPromise\n    };\n  } else if (installationEntry.registrationStatus === 1\n  /* IN_PROGRESS */\n  ) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(installations)\n    };\n  } else {\n    return {\n      installationEntry\n    };\n  }\n}\n/** This will be executed only once for each new Firebase Installation. */\n\n\nasync function registerInstallation(installations, installationEntry) {\n  try {\n    const registeredInstallationEntry = await createInstallationRequest(installations, installationEntry);\n    return set(installations.appConfig, registeredInstallationEntry);\n  } catch (e) {\n    if (isServerError(e) && e.customData.serverCode === 409) {\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      // Registration failed. Set FID as not registered.\n      await set(installations.appConfig, {\n        fid: installationEntry.fid,\n        registrationStatus: 0\n        /* NOT_STARTED */\n\n      });\n    }\n\n    throw e;\n  }\n}\n/** Call if FID registration is pending in another request. */\n\n\nasync function waitUntilFidRegistration(installations) {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n  let entry = await updateInstallationRequest(installations.appConfig);\n\n  while (entry.registrationStatus === 1\n  /* IN_PROGRESS */\n  ) {\n    // createInstallation request still in progress.\n    await sleep(100);\n    entry = await updateInstallationRequest(installations.appConfig);\n  }\n\n  if (entry.registrationStatus === 0\n  /* NOT_STARTED */\n  ) {\n    // The request timed out or failed in a different call. Try again.\n    const {\n      installationEntry,\n      registrationPromise\n    } = await getInstallationEntry(installations);\n\n    if (registrationPromise) {\n      return registrationPromise;\n    } else {\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry;\n    }\n  }\n\n  return entry;\n}\n/**\r\n * Called only if there is a CreateInstallation request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * CreateInstallation request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\n\n\nfunction updateInstallationRequest(appConfig) {\n  return update(appConfig, oldEntry => {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(\"installation-not-found\"\n      /* INSTALLATION_NOT_FOUND */\n      );\n    }\n\n    return clearTimedOutRequest(oldEntry);\n  });\n}\n\nfunction clearTimedOutRequest(entry) {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: 0\n      /* NOT_STARTED */\n\n    };\n  }\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(installationEntry) {\n  return installationEntry.registrationStatus === 1\n  /* IN_PROGRESS */\n  && installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now();\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nasync function generateAuthTokenRequest(_ref6, installationEntry) {\n  let {\n    appConfig,\n    heartbeatServiceProvider\n  } = _ref6;\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n  const headers = getHeadersWithAuth(appConfig, installationEntry); // If heartbeat service exists, add the heartbeat string to the header.\n\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    installation: {\n      sdkVersion: PACKAGE_VERSION,\n      appId: appConfig.appId\n    }\n  };\n  const request = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n\n  if (response.ok) {\n    const responseValue = await response.json();\n    const completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);\n    return completedAuthToken;\n  } else {\n    throw await getErrorFromResponse('Generate Auth Token', response);\n  }\n}\n\nfunction getGenerateAuthTokenEndpoint(appConfig, _ref7) {\n  let {\n    fid\n  } = _ref7;\n  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a valid authentication token for the installation. Generates a new\r\n * token if one doesn't exist, is expired or about to expire.\r\n *\r\n * Should only be called if the Firebase Installation is registered.\r\n */\n\n\nasync function refreshAuthToken(installations) {\n  let forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let tokenPromise;\n  const entry = await update(installations.appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(\"not-registered\"\n      /* NOT_REGISTERED */\n      );\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n      // There is a valid token in the DB.\n      return oldEntry;\n    } else if (oldAuthToken.requestStatus === 1\n    /* IN_PROGRESS */\n    ) {\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\n      return oldEntry;\n    } else {\n      // No token or token expired.\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(\"app-offline\"\n        /* APP_OFFLINE */\n        );\n      }\n\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\n      return inProgressEntry;\n    }\n  });\n  const authToken = tokenPromise ? await tokenPromise : entry.authToken;\n  return authToken;\n}\n/**\r\n * Call only if FID is registered and Auth Token request is in progress.\r\n *\r\n * Waits until the current pending request finishes. If the request times out,\r\n * tries once in this thread as well.\r\n */\n\n\nasync function waitUntilAuthTokenRequest(installations, forceRefresh) {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n  let entry = await updateAuthTokenRequest(installations.appConfig);\n\n  while (entry.authToken.requestStatus === 1\n  /* IN_PROGRESS */\n  ) {\n    // generateAuthToken still in progress.\n    await sleep(100);\n    entry = await updateAuthTokenRequest(installations.appConfig);\n  }\n\n  const authToken = entry.authToken;\n\n  if (authToken.requestStatus === 0\n  /* NOT_STARTED */\n  ) {\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(installations, forceRefresh);\n  } else {\n    return authToken;\n  }\n}\n/**\r\n * Called only if there is a GenerateAuthToken request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * GenerateAuthToken request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\n\n\nfunction updateAuthTokenRequest(appConfig) {\n  return update(appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(\"not-registered\"\n      /* NOT_REGISTERED */\n      );\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return Object.assign(Object.assign({}, oldEntry), {\n        authToken: {\n          requestStatus: 0\n          /* NOT_STARTED */\n\n        }\n      });\n    }\n\n    return oldEntry;\n  });\n}\n\nasync function fetchAuthTokenFromServer(installations, installationEntry) {\n  try {\n    const authToken = await generateAuthTokenRequest(installations, installationEntry);\n    const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), {\n      authToken\n    });\n    await set(installations.appConfig, updatedInstallationEntry);\n    return authToken;\n  } catch (e) {\n    if (isServerError(e) && (e.customData.serverCode === 401 || e.customData.serverCode === 404)) {\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), {\n        authToken: {\n          requestStatus: 0\n          /* NOT_STARTED */\n\n        }\n      });\n      await set(installations.appConfig, updatedInstallationEntry);\n    }\n\n    throw e;\n  }\n}\n\nfunction isEntryRegistered(installationEntry) {\n  return installationEntry !== undefined && installationEntry.registrationStatus === 2\n  /* COMPLETED */\n  ;\n}\n\nfunction isAuthTokenValid(authToken) {\n  return authToken.requestStatus === 2\n  /* COMPLETED */\n  && !isAuthTokenExpired(authToken);\n}\n\nfunction isAuthTokenExpired(authToken) {\n  const now = Date.now();\n  return now < authToken.creationTime || authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER;\n}\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\n\n\nfunction makeAuthTokenRequestInProgressEntry(oldEntry) {\n  const inProgressAuthToken = {\n    requestStatus: 1\n    /* IN_PROGRESS */\n    ,\n    requestTime: Date.now()\n  };\n  return Object.assign(Object.assign({}, oldEntry), {\n    authToken: inProgressAuthToken\n  });\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken) {\n  return authToken.requestStatus === 1\n  /* IN_PROGRESS */\n  && authToken.requestTime + PENDING_TIMEOUT_MS < Date.now();\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Creates a Firebase Installation if there isn't one for the app and\r\n * returns the Installation ID.\r\n * @param installations - The `Installations` instance.\r\n *\r\n * @public\r\n */\n\n\nasync function getId(installations) {\n  const installationsImpl = installations;\n  const {\n    installationEntry,\n    registrationPromise\n  } = await getInstallationEntry(installationsImpl);\n\n  if (registrationPromise) {\n    registrationPromise.catch(console.error);\n  } else {\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(installationsImpl).catch(console.error);\n  }\n\n  return installationEntry.fid;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a Firebase Installations auth token, identifying the current\r\n * Firebase Installation.\r\n * @param installations - The `Installations` instance.\r\n * @param forceRefresh - Force refresh regardless of token expiration.\r\n *\r\n * @public\r\n */\n\n\nasync function getToken(installations) {\n  let forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const installationsImpl = installations;\n  await completeInstallationRegistration(installationsImpl); // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n\n  const authToken = await refreshAuthToken(installationsImpl, forceRefresh);\n  return authToken.token;\n}\n\nasync function completeInstallationRegistration(installations) {\n  const {\n    registrationPromise\n  } = await getInstallationEntry(installations);\n\n  if (registrationPromise) {\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nasync function deleteInstallationRequest(appConfig, installationEntry) {\n  const endpoint = getDeleteEndpoint(appConfig, installationEntry);\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n  const request = {\n    method: 'DELETE',\n    headers\n  };\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n\n  if (!response.ok) {\n    throw await getErrorFromResponse('Delete Installation', response);\n  }\n}\n\nfunction getDeleteEndpoint(appConfig, _ref8) {\n  let {\n    fid\n  } = _ref8;\n  return `${getInstallationsEndpoint(appConfig)}/${fid}`;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Deletes the Firebase Installation and all associated data.\r\n * @param installations - The `Installations` instance.\r\n *\r\n * @public\r\n */\n\n\nasync function deleteInstallations(installations) {\n  const {\n    appConfig\n  } = installations;\n  const entry = await update(appConfig, oldEntry => {\n    if (oldEntry && oldEntry.registrationStatus === 0\n    /* NOT_STARTED */\n    ) {\n      // Delete the unregistered entry without sending a deleteInstallation request.\n      return undefined;\n    }\n\n    return oldEntry;\n  });\n\n  if (entry) {\n    if (entry.registrationStatus === 1\n    /* IN_PROGRESS */\n    ) {\n      // Can't delete while trying to register.\n      throw ERROR_FACTORY.create(\"delete-pending-registration\"\n      /* DELETE_PENDING_REGISTRATION */\n      );\n    } else if (entry.registrationStatus === 2\n    /* COMPLETED */\n    ) {\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(\"app-offline\"\n        /* APP_OFFLINE */\n        );\n      } else {\n        await deleteInstallationRequest(appConfig, entry);\n        await remove(appConfig);\n      }\n    }\n  }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Sets a new callback that will get called when Installation ID changes.\r\n * Returns an unsubscribe function that will remove the callback when called.\r\n * @param installations - The `Installations` instance.\r\n * @param callback - The callback function that is invoked when FID changes.\r\n * @returns A function that can be called to unsubscribe.\r\n *\r\n * @public\r\n */\n\n\nfunction onIdChange(installations, callback) {\n  const {\n    appConfig\n  } = installations;\n  addCallback(appConfig, callback);\n  return () => {\n    removeCallback(appConfig, callback);\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns an instance of {@link Installations} associated with the given\r\n * {@link @firebase/app#FirebaseApp} instance.\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * @public\r\n */\n\n\nfunction getInstallations() {\n  let app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n\n  const installationsImpl = _getProvider(app, 'installations').getImmediate();\n\n  return installationsImpl;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction extractAppConfig(app) {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  } // Required app config keys\n\n\n  const configKeys = ['projectId', 'apiKey', 'appId'];\n\n  for (const keyName of configKeys) {\n    if (!app.options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: app.options.projectId,\n    apiKey: app.options.apiKey,\n    appId: app.options.appId\n  };\n}\n\nfunction getMissingValueError(valueName) {\n  return ERROR_FACTORY.create(\"missing-app-config-values\"\n  /* MISSING_APP_CONFIG_VALUES */\n  , {\n    valueName\n  });\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst INSTALLATIONS_NAME = 'installations';\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\n\nconst publicFactory = container => {\n  const app = container.getProvider('app').getImmediate(); // Throws if app isn't configured properly.\n\n  const appConfig = extractAppConfig(app);\n\n  const heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n\n  const installationsImpl = {\n    app,\n    appConfig,\n    heartbeatServiceProvider,\n    _delete: () => Promise.resolve()\n  };\n  return installationsImpl;\n};\n\nconst internalFactory = container => {\n  const app = container.getProvider('app').getImmediate(); // Internal FIS instance relies on public FIS instance.\n\n  const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\n\n  const installationsInternal = {\n    getId: () => getId(installations),\n    getToken: forceRefresh => getToken(installations, forceRefresh)\n  };\n  return installationsInternal;\n};\n\nfunction registerInstallations() {\n  _registerComponent(new Component(INSTALLATIONS_NAME, publicFactory, \"PUBLIC\"\n  /* PUBLIC */\n  ));\n\n  _registerComponent(new Component(INSTALLATIONS_NAME_INTERNAL, internalFactory, \"PRIVATE\"\n  /* PRIVATE */\n  ));\n}\n/**\r\n * Firebase Installations\r\n *\r\n * @packageDocumentation\r\n */\n\n\nregisterInstallations();\nregisterVersion(name, version); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\nregisterVersion(name, version, 'esm2017');\nexport { deleteInstallations, getId, getInstallations, getToken, onIdChange };","map":{"version":3,"mappings":"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","names":["getApp","_getProvider","_registerComponent","registerVersion","Component","ErrorFactory","FirebaseError","openDB","name","version","PENDING_TIMEOUT_MS","PACKAGE_VERSION","INTERNAL_AUTH_VERSION","INSTALLATIONS_API_URL","TOKEN_EXPIRATION_BUFFER","SERVICE","SERVICE_NAME","ERROR_DESCRIPTION_MAP","ERROR_FACTORY","isServerError","error","code","includes","getInstallationsEndpoint","projectId","extractAuthTokenInfoFromResponse","response","token","requestStatus","expiresIn","getExpiresInFromResponseExpiresIn","creationTime","Date","now","getErrorFromResponse","requestName","responseJson","json","errorData","create","serverCode","serverMessage","message","serverStatus","status","getHeaders","apiKey","Headers","Accept","getHeadersWithAuth","appConfig","refreshToken","headers","append","getAuthorizationHeader","retryIfServerError","fn","result","responseExpiresIn","Number","replace","createInstallationRequest","heartbeatServiceProvider","fid","endpoint","heartbeatService","getImmediate","optional","heartbeatsHeader","getHeartbeatsHeader","body","authVersion","appId","sdkVersion","request","method","JSON","stringify","fetch","ok","responseValue","registeredInstallationEntry","registrationStatus","authToken","sleep","ms","Promise","resolve","setTimeout","bufferToBase64UrlSafe","array","b64","btoa","String","fromCharCode","VALID_FID_PATTERN","INVALID_FID","generateFid","fidByteArray","Uint8Array","crypto","self","msCrypto","getRandomValues","encode","test","_a","b64String","substr","getKey","appName","fidChangeCallbacks","Map","fidChanged","key","callFidChangeCallbacks","broadcastFidChange","addCallback","callback","getBroadcastChannel","callbackSet","get","Set","set","add","removeCallback","delete","size","closeBroadcastChannel","callbacks","channel","postMessage","broadcastChannel","BroadcastChannel","onmessage","e","data","close","DATABASE_NAME","DATABASE_VERSION","OBJECT_STORE_NAME","dbPromise","getDbPromise","upgrade","db","oldVersion","createObjectStore","value","tx","transaction","objectStore","oldValue","put","done","remove","update","updateFn","store","newValue","undefined","getInstallationEntry","installations","registrationPromise","installationEntry","oldEntry","updateOrCreateInstallationEntry","entryWithPromise","triggerRegistrationIfNecessary","entry","clearTimedOutRequest","navigator","onLine","registrationPromiseWithError","reject","inProgressEntry","registrationTime","registerInstallation","waitUntilFidRegistration","customData","updateInstallationRequest","hasInstallationRequestTimedOut","generateAuthTokenRequest","getGenerateAuthTokenEndpoint","installation","completedAuthToken","refreshAuthToken","forceRefresh","tokenPromise","isEntryRegistered","oldAuthToken","isAuthTokenValid","waitUntilAuthTokenRequest","makeAuthTokenRequestInProgressEntry","fetchAuthTokenFromServer","updateAuthTokenRequest","hasAuthTokenRequestTimedOut","Object","assign","updatedInstallationEntry","isAuthTokenExpired","inProgressAuthToken","requestTime","getId","installationsImpl","catch","console","getToken","completeInstallationRegistration","deleteInstallationRequest","getDeleteEndpoint","deleteInstallations","onIdChange","getInstallations","app","extractAppConfig","options","getMissingValueError","configKeys","keyName","valueName","INSTALLATIONS_NAME","INSTALLATIONS_NAME_INTERNAL","publicFactory","container","getProvider","_delete","internalFactory","installationsInternal","registerInstallations"],"sources":["C:/Users/Ismail Saheb/Desktop/AMQ/frontant/react/node_modules/@firebase/installations/dist/esm/index.esm2017.js"],"sourcesContent":["import { getApp, _getProvider, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\n\nconst name = \"@firebase/installations\";\nconst version = \"0.5.12\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PENDING_TIMEOUT_MS = 10000;\r\nconst PACKAGE_VERSION = `w:${version}`;\r\nconst INTERNAL_AUTH_VERSION = 'FIS_v2';\r\nconst INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';\r\nconst TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\r\nconst SERVICE = 'installations';\r\nconst SERVICE_NAME = 'Installations';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERROR_DESCRIPTION_MAP = {\r\n    [\"missing-app-config-values\" /* MISSING_APP_CONFIG_VALUES */]: 'Missing App configuration value: \"{$valueName}\"',\r\n    [\"not-registered\" /* NOT_REGISTERED */]: 'Firebase Installation is not registered.',\r\n    [\"installation-not-found\" /* INSTALLATION_NOT_FOUND */]: 'Firebase Installation not found.',\r\n    [\"request-failed\" /* REQUEST_FAILED */]: '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\r\n    [\"app-offline\" /* APP_OFFLINE */]: 'Could not process request. Application offline.',\r\n    [\"delete-pending-registration\" /* DELETE_PENDING_REGISTRATION */]: \"Can't delete installation while there is a pending registration request.\"\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\r\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\r\nfunction isServerError(error) {\r\n    return (error instanceof FirebaseError &&\r\n        error.code.includes(\"request-failed\" /* REQUEST_FAILED */));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getInstallationsEndpoint({ projectId }) {\r\n    return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\r\n}\r\nfunction extractAuthTokenInfoFromResponse(response) {\r\n    return {\r\n        token: response.token,\r\n        requestStatus: 2 /* COMPLETED */,\r\n        expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\r\n        creationTime: Date.now()\r\n    };\r\n}\r\nasync function getErrorFromResponse(requestName, response) {\r\n    const responseJson = await response.json();\r\n    const errorData = responseJson.error;\r\n    return ERROR_FACTORY.create(\"request-failed\" /* REQUEST_FAILED */, {\r\n        requestName,\r\n        serverCode: errorData.code,\r\n        serverMessage: errorData.message,\r\n        serverStatus: errorData.status\r\n    });\r\n}\r\nfunction getHeaders({ apiKey }) {\r\n    return new Headers({\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json',\r\n        'x-goog-api-key': apiKey\r\n    });\r\n}\r\nfunction getHeadersWithAuth(appConfig, { refreshToken }) {\r\n    const headers = getHeaders(appConfig);\r\n    headers.append('Authorization', getAuthorizationHeader(refreshToken));\r\n    return headers;\r\n}\r\n/**\r\n * Calls the passed in fetch wrapper and returns the response.\r\n * If the returned response has a status of 5xx, re-runs the function once and\r\n * returns the response.\r\n */\r\nasync function retryIfServerError(fn) {\r\n    const result = await fn();\r\n    if (result.status >= 500 && result.status < 600) {\r\n        // Internal Server Error. Retry request.\r\n        return fn();\r\n    }\r\n    return result;\r\n}\r\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn) {\r\n    // This works because the server will never respond with fractions of a second.\r\n    return Number(responseExpiresIn.replace('s', '000'));\r\n}\r\nfunction getAuthorizationHeader(refreshToken) {\r\n    return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function createInstallationRequest({ appConfig, heartbeatServiceProvider }, { fid }) {\r\n    const endpoint = getInstallationsEndpoint(appConfig);\r\n    const headers = getHeaders(appConfig);\r\n    // If heartbeat service exists, add the heartbeat string to the header.\r\n    const heartbeatService = heartbeatServiceProvider.getImmediate({\r\n        optional: true\r\n    });\r\n    if (heartbeatService) {\r\n        const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\r\n        if (heartbeatsHeader) {\r\n            headers.append('x-firebase-client', heartbeatsHeader);\r\n        }\r\n    }\r\n    const body = {\r\n        fid,\r\n        authVersion: INTERNAL_AUTH_VERSION,\r\n        appId: appConfig.appId,\r\n        sdkVersion: PACKAGE_VERSION\r\n    };\r\n    const request = {\r\n        method: 'POST',\r\n        headers,\r\n        body: JSON.stringify(body)\r\n    };\r\n    const response = await retryIfServerError(() => fetch(endpoint, request));\r\n    if (response.ok) {\r\n        const responseValue = await response.json();\r\n        const registeredInstallationEntry = {\r\n            fid: responseValue.fid || fid,\r\n            registrationStatus: 2 /* COMPLETED */,\r\n            refreshToken: responseValue.refreshToken,\r\n            authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\r\n        };\r\n        return registeredInstallationEntry;\r\n    }\r\n    else {\r\n        throw await getErrorFromResponse('Create Installation', response);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Returns a promise that resolves after given time passes. */\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, ms);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction bufferToBase64UrlSafe(array) {\r\n    const b64 = btoa(String.fromCharCode(...array));\r\n    return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\r\nconst INVALID_FID = '';\r\n/**\r\n * Generates a new FID using random values from Web Crypto API.\r\n * Returns an empty string if FID generation fails for any reason.\r\n */\r\nfunction generateFid() {\r\n    try {\r\n        // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\r\n        // bytes. our implementation generates a 17 byte array instead.\r\n        const fidByteArray = new Uint8Array(17);\r\n        const crypto = self.crypto || self.msCrypto;\r\n        crypto.getRandomValues(fidByteArray);\r\n        // Replace the first 4 random bits with the constant FID header of 0b0111.\r\n        fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\r\n        const fid = encode(fidByteArray);\r\n        return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\r\n    }\r\n    catch (_a) {\r\n        // FID generation errored\r\n        return INVALID_FID;\r\n    }\r\n}\r\n/** Converts a FID Uint8Array to a base64 string representation. */\r\nfunction encode(fidByteArray) {\r\n    const b64String = bufferToBase64UrlSafe(fidByteArray);\r\n    // Remove the 23rd character that was added because of the extra 4 bits at the\r\n    // end of our 17 byte array, and the '=' padding.\r\n    return b64String.substr(0, 22);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Returns a string key that can be used to identify the app. */\r\nfunction getKey(appConfig) {\r\n    return `${appConfig.appName}!${appConfig.appId}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst fidChangeCallbacks = new Map();\r\n/**\r\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\r\n * change to other tabs.\r\n */\r\nfunction fidChanged(appConfig, fid) {\r\n    const key = getKey(appConfig);\r\n    callFidChangeCallbacks(key, fid);\r\n    broadcastFidChange(key, fid);\r\n}\r\nfunction addCallback(appConfig, callback) {\r\n    // Open the broadcast channel if it's not already open,\r\n    // to be able to listen to change events from other tabs.\r\n    getBroadcastChannel();\r\n    const key = getKey(appConfig);\r\n    let callbackSet = fidChangeCallbacks.get(key);\r\n    if (!callbackSet) {\r\n        callbackSet = new Set();\r\n        fidChangeCallbacks.set(key, callbackSet);\r\n    }\r\n    callbackSet.add(callback);\r\n}\r\nfunction removeCallback(appConfig, callback) {\r\n    const key = getKey(appConfig);\r\n    const callbackSet = fidChangeCallbacks.get(key);\r\n    if (!callbackSet) {\r\n        return;\r\n    }\r\n    callbackSet.delete(callback);\r\n    if (callbackSet.size === 0) {\r\n        fidChangeCallbacks.delete(key);\r\n    }\r\n    // Close broadcast channel if there are no more callbacks.\r\n    closeBroadcastChannel();\r\n}\r\nfunction callFidChangeCallbacks(key, fid) {\r\n    const callbacks = fidChangeCallbacks.get(key);\r\n    if (!callbacks) {\r\n        return;\r\n    }\r\n    for (const callback of callbacks) {\r\n        callback(fid);\r\n    }\r\n}\r\nfunction broadcastFidChange(key, fid) {\r\n    const channel = getBroadcastChannel();\r\n    if (channel) {\r\n        channel.postMessage({ key, fid });\r\n    }\r\n    closeBroadcastChannel();\r\n}\r\nlet broadcastChannel = null;\r\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\r\nfunction getBroadcastChannel() {\r\n    if (!broadcastChannel && 'BroadcastChannel' in self) {\r\n        broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\r\n        broadcastChannel.onmessage = e => {\r\n            callFidChangeCallbacks(e.data.key, e.data.fid);\r\n        };\r\n    }\r\n    return broadcastChannel;\r\n}\r\nfunction closeBroadcastChannel() {\r\n    if (fidChangeCallbacks.size === 0 && broadcastChannel) {\r\n        broadcastChannel.close();\r\n        broadcastChannel = null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DATABASE_NAME = 'firebase-installations-database';\r\nconst DATABASE_VERSION = 1;\r\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\r\nlet dbPromise = null;\r\nfunction getDbPromise() {\r\n    if (!dbPromise) {\r\n        dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\r\n            upgrade: (db, oldVersion) => {\r\n                // We don't use 'break' in this switch statement, the fall-through\r\n                // behavior is what we want, because if there are multiple versions between\r\n                // the old version and the current version, we want ALL the migrations\r\n                // that correspond to those versions to run, not only the last one.\r\n                // eslint-disable-next-line default-case\r\n                switch (oldVersion) {\r\n                    case 0:\r\n                        db.createObjectStore(OBJECT_STORE_NAME);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return dbPromise;\r\n}\r\n/** Assigns or overwrites the record for the given key with the given value. */\r\nasync function set(appConfig, value) {\r\n    const key = getKey(appConfig);\r\n    const db = await getDbPromise();\r\n    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\r\n    const objectStore = tx.objectStore(OBJECT_STORE_NAME);\r\n    const oldValue = (await objectStore.get(key));\r\n    await objectStore.put(value, key);\r\n    await tx.done;\r\n    if (!oldValue || oldValue.fid !== value.fid) {\r\n        fidChanged(appConfig, value.fid);\r\n    }\r\n    return value;\r\n}\r\n/** Removes record(s) from the objectStore that match the given key. */\r\nasync function remove(appConfig) {\r\n    const key = getKey(appConfig);\r\n    const db = await getDbPromise();\r\n    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\r\n    await tx.objectStore(OBJECT_STORE_NAME).delete(key);\r\n    await tx.done;\r\n}\r\n/**\r\n * Atomically updates a record with the result of updateFn, which gets\r\n * called with the current value. If newValue is undefined, the record is\r\n * deleted instead.\r\n * @return Updated value\r\n */\r\nasync function update(appConfig, updateFn) {\r\n    const key = getKey(appConfig);\r\n    const db = await getDbPromise();\r\n    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\r\n    const store = tx.objectStore(OBJECT_STORE_NAME);\r\n    const oldValue = (await store.get(key));\r\n    const newValue = updateFn(oldValue);\r\n    if (newValue === undefined) {\r\n        await store.delete(key);\r\n    }\r\n    else {\r\n        await store.put(newValue, key);\r\n    }\r\n    await tx.done;\r\n    if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\r\n        fidChanged(appConfig, newValue.fid);\r\n    }\r\n    return newValue;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Updates and returns the InstallationEntry from the database.\r\n * Also triggers a registration request if it is necessary and possible.\r\n */\r\nasync function getInstallationEntry(installations) {\r\n    let registrationPromise;\r\n    const installationEntry = await update(installations.appConfig, oldEntry => {\r\n        const installationEntry = updateOrCreateInstallationEntry(oldEntry);\r\n        const entryWithPromise = triggerRegistrationIfNecessary(installations, installationEntry);\r\n        registrationPromise = entryWithPromise.registrationPromise;\r\n        return entryWithPromise.installationEntry;\r\n    });\r\n    if (installationEntry.fid === INVALID_FID) {\r\n        // FID generation failed. Waiting for the FID from the server.\r\n        return { installationEntry: await registrationPromise };\r\n    }\r\n    return {\r\n        installationEntry,\r\n        registrationPromise\r\n    };\r\n}\r\n/**\r\n * Creates a new Installation Entry if one does not exist.\r\n * Also clears timed out pending requests.\r\n */\r\nfunction updateOrCreateInstallationEntry(oldEntry) {\r\n    const entry = oldEntry || {\r\n        fid: generateFid(),\r\n        registrationStatus: 0 /* NOT_STARTED */\r\n    };\r\n    return clearTimedOutRequest(entry);\r\n}\r\n/**\r\n * If the Firebase Installation is not registered yet, this will trigger the\r\n * registration and return an InProgressInstallationEntry.\r\n *\r\n * If registrationPromise does not exist, the installationEntry is guaranteed\r\n * to be registered.\r\n */\r\nfunction triggerRegistrationIfNecessary(installations, installationEntry) {\r\n    if (installationEntry.registrationStatus === 0 /* NOT_STARTED */) {\r\n        if (!navigator.onLine) {\r\n            // Registration required but app is offline.\r\n            const registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create(\"app-offline\" /* APP_OFFLINE */));\r\n            return {\r\n                installationEntry,\r\n                registrationPromise: registrationPromiseWithError\r\n            };\r\n        }\r\n        // Try registering. Change status to IN_PROGRESS.\r\n        const inProgressEntry = {\r\n            fid: installationEntry.fid,\r\n            registrationStatus: 1 /* IN_PROGRESS */,\r\n            registrationTime: Date.now()\r\n        };\r\n        const registrationPromise = registerInstallation(installations, inProgressEntry);\r\n        return { installationEntry: inProgressEntry, registrationPromise };\r\n    }\r\n    else if (installationEntry.registrationStatus === 1 /* IN_PROGRESS */) {\r\n        return {\r\n            installationEntry,\r\n            registrationPromise: waitUntilFidRegistration(installations)\r\n        };\r\n    }\r\n    else {\r\n        return { installationEntry };\r\n    }\r\n}\r\n/** This will be executed only once for each new Firebase Installation. */\r\nasync function registerInstallation(installations, installationEntry) {\r\n    try {\r\n        const registeredInstallationEntry = await createInstallationRequest(installations, installationEntry);\r\n        return set(installations.appConfig, registeredInstallationEntry);\r\n    }\r\n    catch (e) {\r\n        if (isServerError(e) && e.customData.serverCode === 409) {\r\n            // Server returned a \"FID can not be used\" error.\r\n            // Generate a new ID next time.\r\n            await remove(installations.appConfig);\r\n        }\r\n        else {\r\n            // Registration failed. Set FID as not registered.\r\n            await set(installations.appConfig, {\r\n                fid: installationEntry.fid,\r\n                registrationStatus: 0 /* NOT_STARTED */\r\n            });\r\n        }\r\n        throw e;\r\n    }\r\n}\r\n/** Call if FID registration is pending in another request. */\r\nasync function waitUntilFidRegistration(installations) {\r\n    // Unfortunately, there is no way of reliably observing when a value in\r\n    // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\r\n    // so we need to poll.\r\n    let entry = await updateInstallationRequest(installations.appConfig);\r\n    while (entry.registrationStatus === 1 /* IN_PROGRESS */) {\r\n        // createInstallation request still in progress.\r\n        await sleep(100);\r\n        entry = await updateInstallationRequest(installations.appConfig);\r\n    }\r\n    if (entry.registrationStatus === 0 /* NOT_STARTED */) {\r\n        // The request timed out or failed in a different call. Try again.\r\n        const { installationEntry, registrationPromise } = await getInstallationEntry(installations);\r\n        if (registrationPromise) {\r\n            return registrationPromise;\r\n        }\r\n        else {\r\n            // if there is no registrationPromise, entry is registered.\r\n            return installationEntry;\r\n        }\r\n    }\r\n    return entry;\r\n}\r\n/**\r\n * Called only if there is a CreateInstallation request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * CreateInstallation request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\r\nfunction updateInstallationRequest(appConfig) {\r\n    return update(appConfig, oldEntry => {\r\n        if (!oldEntry) {\r\n            throw ERROR_FACTORY.create(\"installation-not-found\" /* INSTALLATION_NOT_FOUND */);\r\n        }\r\n        return clearTimedOutRequest(oldEntry);\r\n    });\r\n}\r\nfunction clearTimedOutRequest(entry) {\r\n    if (hasInstallationRequestTimedOut(entry)) {\r\n        return {\r\n            fid: entry.fid,\r\n            registrationStatus: 0 /* NOT_STARTED */\r\n        };\r\n    }\r\n    return entry;\r\n}\r\nfunction hasInstallationRequestTimedOut(installationEntry) {\r\n    return (installationEntry.registrationStatus === 1 /* IN_PROGRESS */ &&\r\n        installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now());\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function generateAuthTokenRequest({ appConfig, heartbeatServiceProvider }, installationEntry) {\r\n    const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\r\n    const headers = getHeadersWithAuth(appConfig, installationEntry);\r\n    // If heartbeat service exists, add the heartbeat string to the header.\r\n    const heartbeatService = heartbeatServiceProvider.getImmediate({\r\n        optional: true\r\n    });\r\n    if (heartbeatService) {\r\n        const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\r\n        if (heartbeatsHeader) {\r\n            headers.append('x-firebase-client', heartbeatsHeader);\r\n        }\r\n    }\r\n    const body = {\r\n        installation: {\r\n            sdkVersion: PACKAGE_VERSION,\r\n            appId: appConfig.appId\r\n        }\r\n    };\r\n    const request = {\r\n        method: 'POST',\r\n        headers,\r\n        body: JSON.stringify(body)\r\n    };\r\n    const response = await retryIfServerError(() => fetch(endpoint, request));\r\n    if (response.ok) {\r\n        const responseValue = await response.json();\r\n        const completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);\r\n        return completedAuthToken;\r\n    }\r\n    else {\r\n        throw await getErrorFromResponse('Generate Auth Token', response);\r\n    }\r\n}\r\nfunction getGenerateAuthTokenEndpoint(appConfig, { fid }) {\r\n    return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a valid authentication token for the installation. Generates a new\r\n * token if one doesn't exist, is expired or about to expire.\r\n *\r\n * Should only be called if the Firebase Installation is registered.\r\n */\r\nasync function refreshAuthToken(installations, forceRefresh = false) {\r\n    let tokenPromise;\r\n    const entry = await update(installations.appConfig, oldEntry => {\r\n        if (!isEntryRegistered(oldEntry)) {\r\n            throw ERROR_FACTORY.create(\"not-registered\" /* NOT_REGISTERED */);\r\n        }\r\n        const oldAuthToken = oldEntry.authToken;\r\n        if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\r\n            // There is a valid token in the DB.\r\n            return oldEntry;\r\n        }\r\n        else if (oldAuthToken.requestStatus === 1 /* IN_PROGRESS */) {\r\n            // There already is a token request in progress.\r\n            tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\r\n            return oldEntry;\r\n        }\r\n        else {\r\n            // No token or token expired.\r\n            if (!navigator.onLine) {\r\n                throw ERROR_FACTORY.create(\"app-offline\" /* APP_OFFLINE */);\r\n            }\r\n            const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\r\n            tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\r\n            return inProgressEntry;\r\n        }\r\n    });\r\n    const authToken = tokenPromise\r\n        ? await tokenPromise\r\n        : entry.authToken;\r\n    return authToken;\r\n}\r\n/**\r\n * Call only if FID is registered and Auth Token request is in progress.\r\n *\r\n * Waits until the current pending request finishes. If the request times out,\r\n * tries once in this thread as well.\r\n */\r\nasync function waitUntilAuthTokenRequest(installations, forceRefresh) {\r\n    // Unfortunately, there is no way of reliably observing when a value in\r\n    // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\r\n    // so we need to poll.\r\n    let entry = await updateAuthTokenRequest(installations.appConfig);\r\n    while (entry.authToken.requestStatus === 1 /* IN_PROGRESS */) {\r\n        // generateAuthToken still in progress.\r\n        await sleep(100);\r\n        entry = await updateAuthTokenRequest(installations.appConfig);\r\n    }\r\n    const authToken = entry.authToken;\r\n    if (authToken.requestStatus === 0 /* NOT_STARTED */) {\r\n        // The request timed out or failed in a different call. Try again.\r\n        return refreshAuthToken(installations, forceRefresh);\r\n    }\r\n    else {\r\n        return authToken;\r\n    }\r\n}\r\n/**\r\n * Called only if there is a GenerateAuthToken request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * GenerateAuthToken request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\r\nfunction updateAuthTokenRequest(appConfig) {\r\n    return update(appConfig, oldEntry => {\r\n        if (!isEntryRegistered(oldEntry)) {\r\n            throw ERROR_FACTORY.create(\"not-registered\" /* NOT_REGISTERED */);\r\n        }\r\n        const oldAuthToken = oldEntry.authToken;\r\n        if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\r\n            return Object.assign(Object.assign({}, oldEntry), { authToken: { requestStatus: 0 /* NOT_STARTED */ } });\r\n        }\r\n        return oldEntry;\r\n    });\r\n}\r\nasync function fetchAuthTokenFromServer(installations, installationEntry) {\r\n    try {\r\n        const authToken = await generateAuthTokenRequest(installations, installationEntry);\r\n        const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), { authToken });\r\n        await set(installations.appConfig, updatedInstallationEntry);\r\n        return authToken;\r\n    }\r\n    catch (e) {\r\n        if (isServerError(e) &&\r\n            (e.customData.serverCode === 401 || e.customData.serverCode === 404)) {\r\n            // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\r\n            // Generate a new ID next time.\r\n            await remove(installations.appConfig);\r\n        }\r\n        else {\r\n            const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), { authToken: { requestStatus: 0 /* NOT_STARTED */ } });\r\n            await set(installations.appConfig, updatedInstallationEntry);\r\n        }\r\n        throw e;\r\n    }\r\n}\r\nfunction isEntryRegistered(installationEntry) {\r\n    return (installationEntry !== undefined &&\r\n        installationEntry.registrationStatus === 2 /* COMPLETED */);\r\n}\r\nfunction isAuthTokenValid(authToken) {\r\n    return (authToken.requestStatus === 2 /* COMPLETED */ &&\r\n        !isAuthTokenExpired(authToken));\r\n}\r\nfunction isAuthTokenExpired(authToken) {\r\n    const now = Date.now();\r\n    return (now < authToken.creationTime ||\r\n        authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER);\r\n}\r\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\r\nfunction makeAuthTokenRequestInProgressEntry(oldEntry) {\r\n    const inProgressAuthToken = {\r\n        requestStatus: 1 /* IN_PROGRESS */,\r\n        requestTime: Date.now()\r\n    };\r\n    return Object.assign(Object.assign({}, oldEntry), { authToken: inProgressAuthToken });\r\n}\r\nfunction hasAuthTokenRequestTimedOut(authToken) {\r\n    return (authToken.requestStatus === 1 /* IN_PROGRESS */ &&\r\n        authToken.requestTime + PENDING_TIMEOUT_MS < Date.now());\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Creates a Firebase Installation if there isn't one for the app and\r\n * returns the Installation ID.\r\n * @param installations - The `Installations` instance.\r\n *\r\n * @public\r\n */\r\nasync function getId(installations) {\r\n    const installationsImpl = installations;\r\n    const { installationEntry, registrationPromise } = await getInstallationEntry(installationsImpl);\r\n    if (registrationPromise) {\r\n        registrationPromise.catch(console.error);\r\n    }\r\n    else {\r\n        // If the installation is already registered, update the authentication\r\n        // token if needed.\r\n        refreshAuthToken(installationsImpl).catch(console.error);\r\n    }\r\n    return installationEntry.fid;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a Firebase Installations auth token, identifying the current\r\n * Firebase Installation.\r\n * @param installations - The `Installations` instance.\r\n * @param forceRefresh - Force refresh regardless of token expiration.\r\n *\r\n * @public\r\n */\r\nasync function getToken(installations, forceRefresh = false) {\r\n    const installationsImpl = installations;\r\n    await completeInstallationRegistration(installationsImpl);\r\n    // At this point we either have a Registered Installation in the DB, or we've\r\n    // already thrown an error.\r\n    const authToken = await refreshAuthToken(installationsImpl, forceRefresh);\r\n    return authToken.token;\r\n}\r\nasync function completeInstallationRegistration(installations) {\r\n    const { registrationPromise } = await getInstallationEntry(installations);\r\n    if (registrationPromise) {\r\n        // A createInstallation request is in progress. Wait until it finishes.\r\n        await registrationPromise;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function deleteInstallationRequest(appConfig, installationEntry) {\r\n    const endpoint = getDeleteEndpoint(appConfig, installationEntry);\r\n    const headers = getHeadersWithAuth(appConfig, installationEntry);\r\n    const request = {\r\n        method: 'DELETE',\r\n        headers\r\n    };\r\n    const response = await retryIfServerError(() => fetch(endpoint, request));\r\n    if (!response.ok) {\r\n        throw await getErrorFromResponse('Delete Installation', response);\r\n    }\r\n}\r\nfunction getDeleteEndpoint(appConfig, { fid }) {\r\n    return `${getInstallationsEndpoint(appConfig)}/${fid}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Deletes the Firebase Installation and all associated data.\r\n * @param installations - The `Installations` instance.\r\n *\r\n * @public\r\n */\r\nasync function deleteInstallations(installations) {\r\n    const { appConfig } = installations;\r\n    const entry = await update(appConfig, oldEntry => {\r\n        if (oldEntry && oldEntry.registrationStatus === 0 /* NOT_STARTED */) {\r\n            // Delete the unregistered entry without sending a deleteInstallation request.\r\n            return undefined;\r\n        }\r\n        return oldEntry;\r\n    });\r\n    if (entry) {\r\n        if (entry.registrationStatus === 1 /* IN_PROGRESS */) {\r\n            // Can't delete while trying to register.\r\n            throw ERROR_FACTORY.create(\"delete-pending-registration\" /* DELETE_PENDING_REGISTRATION */);\r\n        }\r\n        else if (entry.registrationStatus === 2 /* COMPLETED */) {\r\n            if (!navigator.onLine) {\r\n                throw ERROR_FACTORY.create(\"app-offline\" /* APP_OFFLINE */);\r\n            }\r\n            else {\r\n                await deleteInstallationRequest(appConfig, entry);\r\n                await remove(appConfig);\r\n            }\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Sets a new callback that will get called when Installation ID changes.\r\n * Returns an unsubscribe function that will remove the callback when called.\r\n * @param installations - The `Installations` instance.\r\n * @param callback - The callback function that is invoked when FID changes.\r\n * @returns A function that can be called to unsubscribe.\r\n *\r\n * @public\r\n */\r\nfunction onIdChange(installations, callback) {\r\n    const { appConfig } = installations;\r\n    addCallback(appConfig, callback);\r\n    return () => {\r\n        removeCallback(appConfig, callback);\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns an instance of {@link Installations} associated with the given\r\n * {@link @firebase/app#FirebaseApp} instance.\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * @public\r\n */\r\nfunction getInstallations(app = getApp()) {\r\n    const installationsImpl = _getProvider(app, 'installations').getImmediate();\r\n    return installationsImpl;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction extractAppConfig(app) {\r\n    if (!app || !app.options) {\r\n        throw getMissingValueError('App Configuration');\r\n    }\r\n    if (!app.name) {\r\n        throw getMissingValueError('App Name');\r\n    }\r\n    // Required app config keys\r\n    const configKeys = [\r\n        'projectId',\r\n        'apiKey',\r\n        'appId'\r\n    ];\r\n    for (const keyName of configKeys) {\r\n        if (!app.options[keyName]) {\r\n            throw getMissingValueError(keyName);\r\n        }\r\n    }\r\n    return {\r\n        appName: app.name,\r\n        projectId: app.options.projectId,\r\n        apiKey: app.options.apiKey,\r\n        appId: app.options.appId\r\n    };\r\n}\r\nfunction getMissingValueError(valueName) {\r\n    return ERROR_FACTORY.create(\"missing-app-config-values\" /* MISSING_APP_CONFIG_VALUES */, {\r\n        valueName\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst INSTALLATIONS_NAME = 'installations';\r\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\r\nconst publicFactory = (container) => {\r\n    const app = container.getProvider('app').getImmediate();\r\n    // Throws if app isn't configured properly.\r\n    const appConfig = extractAppConfig(app);\r\n    const heartbeatServiceProvider = _getProvider(app, 'heartbeat');\r\n    const installationsImpl = {\r\n        app,\r\n        appConfig,\r\n        heartbeatServiceProvider,\r\n        _delete: () => Promise.resolve()\r\n    };\r\n    return installationsImpl;\r\n};\r\nconst internalFactory = (container) => {\r\n    const app = container.getProvider('app').getImmediate();\r\n    // Internal FIS instance relies on public FIS instance.\r\n    const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\r\n    const installationsInternal = {\r\n        getId: () => getId(installations),\r\n        getToken: (forceRefresh) => getToken(installations, forceRefresh)\r\n    };\r\n    return installationsInternal;\r\n};\r\nfunction registerInstallations() {\r\n    _registerComponent(new Component(INSTALLATIONS_NAME, publicFactory, \"PUBLIC\" /* PUBLIC */));\r\n    _registerComponent(new Component(INSTALLATIONS_NAME_INTERNAL, internalFactory, \"PRIVATE\" /* PRIVATE */));\r\n}\n\n/**\r\n * Firebase Installations\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterInstallations();\r\nregisterVersion(name, version);\r\n// BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\nregisterVersion(name, version, 'esm2017');\n\nexport { deleteInstallations, getId, getInstallations, getToken, onIdChange };\n"]},"metadata":{},"sourceType":"module"}