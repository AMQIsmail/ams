{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/Ismail Saheb/Desktop/AMQ/amq/frontant/react/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/Ismail Saheb/Desktop/AMQ/amq/frontant/react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ismail Saheb/Desktop/AMQ/amq/frontant/react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"C:/Users/Ismail Saheb/Desktop/AMQ/amq/frontant/react/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\nvar _ConsoleMethod;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A container for all of the Logger instances\r\n */\nvar instances = [];\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\n\nvar LogLevel;\n\n(function (LogLevel) {\n  LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n  LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\n  LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\n  LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\n  LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\n  LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\n})(LogLevel || (LogLevel = {}));\n\nvar levelStringToEnum = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n/**\r\n * The default log level\r\n */\n\nvar defaultLogLevel = LogLevel.INFO;\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\n\nvar ConsoleMethod = (_ConsoleMethod = {}, _defineProperty(_ConsoleMethod, LogLevel.DEBUG, 'log'), _defineProperty(_ConsoleMethod, LogLevel.VERBOSE, 'log'), _defineProperty(_ConsoleMethod, LogLevel.INFO, 'info'), _defineProperty(_ConsoleMethod, LogLevel.WARN, 'warn'), _defineProperty(_ConsoleMethod, LogLevel.ERROR, 'error'), _ConsoleMethod);\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\n\nvar defaultLogHandler = function defaultLogHandler(instance, logType) {\n  if (logType < instance.logLevel) {\n    return;\n  }\n\n  var now = new Date().toISOString();\n  var method = ConsoleMethod[logType];\n\n  if (method) {\n    var _console;\n\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    (_console = console)[method].apply(_console, [\"[\".concat(now, \"]  \").concat(instance.name, \":\")].concat(args));\n  } else {\n    throw new Error(\"Attempted to log a message with an invalid logType (value: \".concat(logType, \")\"));\n  }\n};\n\nvar Logger = /*#__PURE__*/function () {\n  /**\r\n   * Gives you an instance of a Logger to capture messages according to\r\n   * Firebase's logging scheme.\r\n   *\r\n   * @param name The name that the logs will be associated with\r\n   */\n  function Logger(name) {\n    _classCallCheck(this, Logger);\n\n    this.name = name;\n    /**\r\n     * The log level of the given Logger instance.\r\n     */\n\n    this._logLevel = defaultLogLevel;\n    /**\r\n     * The main (internal) log handler for the Logger instance.\r\n     * Can be set to a new function in internal package code but not by user.\r\n     */\n\n    this._logHandler = defaultLogHandler;\n    /**\r\n     * The optional, additional, user-defined log handler for the Logger instance.\r\n     */\n\n    this._userLogHandler = null;\n    /**\r\n     * Capture the current instance for later use\r\n     */\n\n    instances.push(this);\n  }\n\n  _createClass(Logger, [{\n    key: \"logLevel\",\n    get: function get() {\n      return this._logLevel;\n    },\n    set: function set(val) {\n      if (!(val in LogLevel)) {\n        throw new TypeError(\"Invalid value \\\"\".concat(val, \"\\\" assigned to `logLevel`\"));\n      }\n\n      this._logLevel = val;\n    } // Workaround for setter/getter having to be the same type.\n\n  }, {\n    key: \"setLogLevel\",\n    value: function setLogLevel(val) {\n      this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n    }\n  }, {\n    key: \"logHandler\",\n    get: function get() {\n      return this._logHandler;\n    },\n    set: function set(val) {\n      if (typeof val !== 'function') {\n        throw new TypeError('Value assigned to `logHandler` must be a function');\n      }\n\n      this._logHandler = val;\n    }\n  }, {\n    key: \"userLogHandler\",\n    get: function get() {\n      return this._userLogHandler;\n    },\n    set: function set(val) {\n      this._userLogHandler = val;\n    }\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\n\n  }, {\n    key: \"debug\",\n    value: function debug() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      this._userLogHandler && this._userLogHandler.apply(this, [this, LogLevel.DEBUG].concat(args));\n\n      this._logHandler.apply(this, [this, LogLevel.DEBUG].concat(args));\n    }\n  }, {\n    key: \"log\",\n    value: function log() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      this._userLogHandler && this._userLogHandler.apply(this, [this, LogLevel.VERBOSE].concat(args));\n\n      this._logHandler.apply(this, [this, LogLevel.VERBOSE].concat(args));\n    }\n  }, {\n    key: \"info\",\n    value: function info() {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      this._userLogHandler && this._userLogHandler.apply(this, [this, LogLevel.INFO].concat(args));\n\n      this._logHandler.apply(this, [this, LogLevel.INFO].concat(args));\n    }\n  }, {\n    key: \"warn\",\n    value: function warn() {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n\n      this._userLogHandler && this._userLogHandler.apply(this, [this, LogLevel.WARN].concat(args));\n\n      this._logHandler.apply(this, [this, LogLevel.WARN].concat(args));\n    }\n  }, {\n    key: \"error\",\n    value: function error() {\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n\n      this._userLogHandler && this._userLogHandler.apply(this, [this, LogLevel.ERROR].concat(args));\n\n      this._logHandler.apply(this, [this, LogLevel.ERROR].concat(args));\n    }\n  }]);\n\n  return Logger;\n}();\n\nfunction setLogLevel(level) {\n  instances.forEach(function (inst) {\n    inst.setLogLevel(level);\n  });\n}\n\nfunction setUserLogHandler(logCallback, options) {\n  var _iterator = _createForOfIteratorHelper(instances),\n      _step;\n\n  try {\n    var _loop = function _loop() {\n      var instance = _step.value;\n      var customLogLevel = null;\n\n      if (options && options.level) {\n        customLogLevel = levelStringToEnum[options.level];\n      }\n\n      if (logCallback === null) {\n        instance.userLogHandler = null;\n      } else {\n        instance.userLogHandler = function (instance, level) {\n          for (var _len7 = arguments.length, args = new Array(_len7 > 2 ? _len7 - 2 : 0), _key7 = 2; _key7 < _len7; _key7++) {\n            args[_key7 - 2] = arguments[_key7];\n          }\n\n          var message = args.map(function (arg) {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          }).filter(function (arg) {\n            return arg;\n          }).join(' ');\n\n          if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\n            logCallback({\n              level: LogLevel[level].toLowerCase(),\n              message: message,\n              args: args,\n              type: instance.name\n            });\n          }\n        };\n      }\n    };\n\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      _loop();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };","map":{"version":3,"mappings":"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","names":["instances","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","instance","logType","logLevel","now","Date","toISOString","method","args","name","Error","Logger","_logLevel","_logHandler","_userLogHandler","push","val","TypeError","setLogLevel","level","forEach","inst","setUserLogHandler","logCallback","options","customLogLevel","userLogHandler","message","map","arg","toString","JSON","stringify","ignored","filter","join","toLowerCase","type"],"sources":["C:/Users/Ismail Saheb/Desktop/AMQ/amq/frontant/react/node_modules/@firebase/logger/dist/esm/index.esm2017.js"],"sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nconst instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\nconst levelStringToEnum = {\r\n    'debug': LogLevel.DEBUG,\r\n    'verbose': LogLevel.VERBOSE,\r\n    'info': LogLevel.INFO,\r\n    'warn': LogLevel.WARN,\r\n    'error': LogLevel.ERROR,\r\n    'silent': LogLevel.SILENT\r\n};\r\n/**\r\n * The default log level\r\n */\r\nconst defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\r\nconst ConsoleMethod = {\r\n    [LogLevel.DEBUG]: 'log',\r\n    [LogLevel.VERBOSE]: 'log',\r\n    [LogLevel.INFO]: 'info',\r\n    [LogLevel.WARN]: 'warn',\r\n    [LogLevel.ERROR]: 'error'\r\n};\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nconst defaultLogHandler = (instance, logType, ...args) => {\r\n    if (logType < instance.logLevel) {\r\n        return;\r\n    }\r\n    const now = new Date().toISOString();\r\n    const method = ConsoleMethod[logType];\r\n    if (method) {\r\n        console[method](`[${now}]  ${instance.name}:`, ...args);\r\n    }\r\n    else {\r\n        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\r\n    }\r\n};\r\nclass Logger {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The main (internal) log handler for the Logger instance.\r\n         * Can be set to a new function in internal package code but not by user.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * The optional, additional, user-defined log handler for the Logger instance.\r\n         */\r\n        this._userLogHandler = null;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    get logLevel() {\r\n        return this._logLevel;\r\n    }\r\n    set logLevel(val) {\r\n        if (!(val in LogLevel)) {\r\n            throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\r\n        }\r\n        this._logLevel = val;\r\n    }\r\n    // Workaround for setter/getter having to be the same type.\r\n    setLogLevel(val) {\r\n        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\r\n    }\r\n    get logHandler() {\r\n        return this._logHandler;\r\n    }\r\n    set logHandler(val) {\r\n        if (typeof val !== 'function') {\r\n            throw new TypeError('Value assigned to `logHandler` must be a function');\r\n        }\r\n        this._logHandler = val;\r\n    }\r\n    get userLogHandler() {\r\n        return this._userLogHandler;\r\n    }\r\n    set userLogHandler(val) {\r\n        this._userLogHandler = val;\r\n    }\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    debug(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\r\n        this._logHandler(this, LogLevel.DEBUG, ...args);\r\n    }\r\n    log(...args) {\r\n        this._userLogHandler &&\r\n            this._userLogHandler(this, LogLevel.VERBOSE, ...args);\r\n        this._logHandler(this, LogLevel.VERBOSE, ...args);\r\n    }\r\n    info(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\r\n        this._logHandler(this, LogLevel.INFO, ...args);\r\n    }\r\n    warn(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\r\n        this._logHandler(this, LogLevel.WARN, ...args);\r\n    }\r\n    error(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\r\n        this._logHandler(this, LogLevel.ERROR, ...args);\r\n    }\r\n}\r\nfunction setLogLevel(level) {\r\n    instances.forEach(inst => {\r\n        inst.setLogLevel(level);\r\n    });\r\n}\r\nfunction setUserLogHandler(logCallback, options) {\r\n    for (const instance of instances) {\r\n        let customLogLevel = null;\r\n        if (options && options.level) {\r\n            customLogLevel = levelStringToEnum[options.level];\r\n        }\r\n        if (logCallback === null) {\r\n            instance.userLogHandler = null;\r\n        }\r\n        else {\r\n            instance.userLogHandler = (instance, level, ...args) => {\r\n                const message = args\r\n                    .map(arg => {\r\n                    if (arg == null) {\r\n                        return null;\r\n                    }\r\n                    else if (typeof arg === 'string') {\r\n                        return arg;\r\n                    }\r\n                    else if (typeof arg === 'number' || typeof arg === 'boolean') {\r\n                        return arg.toString();\r\n                    }\r\n                    else if (arg instanceof Error) {\r\n                        return arg.message;\r\n                    }\r\n                    else {\r\n                        try {\r\n                            return JSON.stringify(arg);\r\n                        }\r\n                        catch (ignored) {\r\n                            return null;\r\n                        }\r\n                    }\r\n                })\r\n                    .filter(arg => arg)\r\n                    .join(' ');\r\n                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\r\n                    logCallback({\r\n                        level: LogLevel[level].toLowerCase(),\r\n                        message,\r\n                        args,\r\n                        type: instance.name\r\n                    });\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\n\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };\n"]},"metadata":{},"sourceType":"module"}