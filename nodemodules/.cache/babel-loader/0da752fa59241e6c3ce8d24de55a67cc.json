{"ast":null,"code":"import _toConsumableArray from \"C:/Users/Ismail Saheb/Desktop/ams/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"C:/Users/Ismail Saheb/Desktop/ams/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"C:/Users/Ismail Saheb/Desktop/ams/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/Ismail Saheb/Desktop/ams/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/Ismail Saheb/Desktop/ams/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ismail Saheb/Desktop/ams/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\Ismail Saheb\\\\Desktop\\\\ams\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport { Deferred } from '@firebase/util';\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\n\nvar Component = /*#__PURE__*/function () {\n  /**\r\n   *\r\n   * @param name The public service name, e.g. app, auth, firestore, database\r\n   * @param instanceFactory Service factory responsible for creating the public interface\r\n   * @param type whether the service provided by the component is public or private\r\n   */\n  function Component(name, instanceFactory, type) {\n    _classCallCheck(this, Component);\n\n    this.name = name;\n    this.instanceFactory = instanceFactory;\n    this.type = type;\n    this.multipleInstances = false;\n    /**\r\n     * Properties to be added to the service namespace\r\n     */\n\n    this.serviceProps = {};\n    this.instantiationMode = \"LAZY\"\n    /* LAZY */\n    ;\n    this.onInstanceCreated = null;\n  }\n\n  _createClass(Component, [{\n    key: \"setInstantiationMode\",\n    value: function setInstantiationMode(mode) {\n      this.instantiationMode = mode;\n      return this;\n    }\n  }, {\n    key: \"setMultipleInstances\",\n    value: function setMultipleInstances(multipleInstances) {\n      this.multipleInstances = multipleInstances;\n      return this;\n    }\n  }, {\n    key: \"setServiceProps\",\n    value: function setServiceProps(props) {\n      this.serviceProps = props;\n      return this;\n    }\n  }, {\n    key: \"setInstanceCreatedCallback\",\n    value: function setInstanceCreatedCallback(callback) {\n      this.onInstanceCreated = callback;\n      return this;\n    }\n  }]);\n\n  return Component;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\n\nvar Provider = /*#__PURE__*/function () {\n  function Provider(name, container) {\n    _classCallCheck(this, Provider);\n\n    this.name = name;\n    this.container = container;\n    this.component = null;\n    this.instances = new Map();\n    this.instancesDeferred = new Map();\n    this.instancesOptions = new Map();\n    this.onInitCallbacks = new Map();\n  }\n  /**\r\n   * @param identifier A provider can provide mulitple instances of a service\r\n   * if this.component.multipleInstances is true.\r\n   */\n\n\n  _createClass(Provider, [{\n    key: \"get\",\n    value: function get(identifier) {\n      // if multipleInstances is not supported, use the default name\n      var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n      if (!this.instancesDeferred.has(normalizedIdentifier)) {\n        var deferred = new Deferred();\n        this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n        if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {\n          // initialize the service if it can be auto-initialized\n          try {\n            var instance = this.getOrInitializeService({\n              instanceIdentifier: normalizedIdentifier\n            });\n\n            if (instance) {\n              deferred.resolve(instance);\n            }\n          } catch (e) {// when the instance factory throws an exception during get(), it should not cause\n            // a fatal error. We just return the unresolved promise in this case.\n          }\n        }\n      }\n\n      return this.instancesDeferred.get(normalizedIdentifier).promise;\n    }\n  }, {\n    key: \"getImmediate\",\n    value: function getImmediate(options) {\n      var _a; // if multipleInstances is not supported, use the default name\n\n\n      var normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\n      var optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\n\n      if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {\n        try {\n          return this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n        } catch (e) {\n          if (optional) {\n            return null;\n          } else {\n            throw e;\n          }\n        }\n      } else {\n        // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n        if (optional) {\n          return null;\n        } else {\n          throw Error(\"Service \".concat(this.name, \" is not available\"));\n        }\n      }\n    }\n  }, {\n    key: \"getComponent\",\n    value: function getComponent() {\n      return this.component;\n    }\n  }, {\n    key: \"setComponent\",\n    value: function setComponent(component) {\n      if (component.name !== this.name) {\n        throw Error(\"Mismatching Component \".concat(component.name, \" for Provider \").concat(this.name, \".\"));\n      }\n\n      if (this.component) {\n        throw Error(\"Component for \".concat(this.name, \" has already been provided\"));\n      }\n\n      this.component = component; // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n\n      if (!this.shouldAutoInitialize()) {\n        return;\n      } // if the service is eager, initialize the default instance\n\n\n      if (isComponentEager(component)) {\n        try {\n          this.getOrInitializeService({\n            instanceIdentifier: DEFAULT_ENTRY_NAME\n          });\n        } catch (e) {// when the instance factory for an eager Component throws an exception during the eager\n          // initialization, it should not cause a fatal error.\n          // TODO: Investigate if we need to make it configurable, because some component may want to cause\n          // a fatal error in this case?\n        }\n      } // Create service instances for the pending promises and resolve them\n      // NOTE: if this.multipleInstances is false, only the default instance will be created\n      // and all promises with resolve with it regardless of the identifier.\n\n\n      var _iterator = _createForOfIteratorHelper(this.instancesDeferred.entries()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              instanceIdentifier = _step$value[0],\n              instanceDeferred = _step$value[1];\n\n          var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n\n          try {\n            // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n            var instance = this.getOrInitializeService({\n              instanceIdentifier: normalizedIdentifier\n            });\n            instanceDeferred.resolve(instance);\n          } catch (e) {// when the instance factory throws an exception, it should not cause\n            // a fatal error. We just leave the promise unresolved.\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"clearInstance\",\n    value: function clearInstance() {\n      var identifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_ENTRY_NAME;\n      this.instancesDeferred.delete(identifier);\n      this.instancesOptions.delete(identifier);\n      this.instances.delete(identifier);\n    } // app.delete() will call this method on every provider to delete the services\n    // TODO: should we mark the provider as deleted?\n\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var services;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                services = Array.from(this.instances.values());\n                _context.next = 3;\n                return Promise.all([].concat(_toConsumableArray(services.filter(function (service) {\n                  return 'INTERNAL' in service;\n                }) // legacy services\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                .map(function (service) {\n                  return service.INTERNAL.delete();\n                })), _toConsumableArray(services.filter(function (service) {\n                  return '_delete' in service;\n                }) // modularized services\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                .map(function (service) {\n                  return service._delete();\n                }))));\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _delete() {\n        return _delete2.apply(this, arguments);\n      }\n\n      return _delete;\n    }()\n  }, {\n    key: \"isComponentSet\",\n    value: function isComponentSet() {\n      return this.component != null;\n    }\n  }, {\n    key: \"isInitialized\",\n    value: function isInitialized() {\n      var identifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_ENTRY_NAME;\n      return this.instances.has(identifier);\n    }\n  }, {\n    key: \"getOptions\",\n    value: function getOptions() {\n      var identifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_ENTRY_NAME;\n      return this.instancesOptions.get(identifier) || {};\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _opts$options = opts.options,\n          options = _opts$options === void 0 ? {} : _opts$options;\n      var normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\n\n      if (this.isInitialized(normalizedIdentifier)) {\n        throw Error(\"\".concat(this.name, \"(\").concat(normalizedIdentifier, \") has already been initialized\"));\n      }\n\n      if (!this.isComponentSet()) {\n        throw Error(\"Component \".concat(this.name, \" has not been registered yet\"));\n      }\n\n      var instance = this.getOrInitializeService({\n        instanceIdentifier: normalizedIdentifier,\n        options: options\n      }); // resolve any pending promise waiting for the service instance\n\n      var _iterator2 = _createForOfIteratorHelper(this.instancesDeferred.entries()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              instanceIdentifier = _step2$value[0],\n              instanceDeferred = _step2$value[1];\n\n          var normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n\n          if (normalizedIdentifier === normalizedDeferredIdentifier) {\n            instanceDeferred.resolve(instance);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return instance;\n    }\n    /**\r\n     *\r\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n     *\r\n     * @param identifier An optional instance identifier\r\n     * @returns a function to unregister the callback\r\n     */\n\n  }, {\n    key: \"onInit\",\n    value: function onInit(callback, identifier) {\n      var _a;\n\n      var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n      var existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\n      existingCallbacks.add(callback);\n      this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n      var existingInstance = this.instances.get(normalizedIdentifier);\n\n      if (existingInstance) {\n        callback(existingInstance, normalizedIdentifier);\n      }\n\n      return function () {\n        existingCallbacks.delete(callback);\n      };\n    }\n    /**\r\n     * Invoke onInit callbacks synchronously\r\n     * @param instance the service instance`\r\n     */\n\n  }, {\n    key: \"invokeOnInitCallbacks\",\n    value: function invokeOnInitCallbacks(instance, identifier) {\n      var callbacks = this.onInitCallbacks.get(identifier);\n\n      if (!callbacks) {\n        return;\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(callbacks),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var callback = _step3.value;\n\n          try {\n            callback(instance, identifier);\n          } catch (_a) {// ignore errors in the onInit callback\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"getOrInitializeService\",\n    value: function getOrInitializeService(_ref) {\n      var instanceIdentifier = _ref.instanceIdentifier,\n          _ref$options = _ref.options,\n          options = _ref$options === void 0 ? {} : _ref$options;\n      var instance = this.instances.get(instanceIdentifier);\n\n      if (!instance && this.component) {\n        instance = this.component.instanceFactory(this.container, {\n          instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n          options: options\n        });\n        this.instances.set(instanceIdentifier, instance);\n        this.instancesOptions.set(instanceIdentifier, options);\n        /**\r\n         * Invoke onInit listeners.\r\n         * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n         * while onInit listeners are registered by consumers of the provider.\r\n         */\n\n        this.invokeOnInitCallbacks(instance, instanceIdentifier);\n        /**\r\n         * Order is important\r\n         * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n         * makes `isInitialized()` return true.\r\n         */\n\n        if (this.component.onInstanceCreated) {\n          try {\n            this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\n          } catch (_a) {// ignore errors in the onInstanceCreatedCallback\n          }\n        }\n      }\n\n      return instance || null;\n    }\n  }, {\n    key: \"normalizeInstanceIdentifier\",\n    value: function normalizeInstanceIdentifier() {\n      var identifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_ENTRY_NAME;\n\n      if (this.component) {\n        return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n      } else {\n        return identifier; // assume multiple instances are supported before the component is provided.\n      }\n    }\n  }, {\n    key: \"shouldAutoInitialize\",\n    value: function shouldAutoInitialize() {\n      return !!this.component && this.component.instantiationMode !== \"EXPLICIT\"\n      /* EXPLICIT */\n      ;\n    }\n  }]);\n\n  return Provider;\n}(); // undefined should be passed to the service factory for the default instance\n\n\nfunction normalizeIdentifierForFactory(identifier) {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager(component) {\n  return component.instantiationMode === \"EAGER\"\n  /* EAGER */\n  ;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\n\n\nvar ComponentContainer = /*#__PURE__*/function () {\n  function ComponentContainer(name) {\n    _classCallCheck(this, ComponentContainer);\n\n    this.name = name;\n    this.providers = new Map();\n  }\n  /**\r\n   *\r\n   * @param component Component being added\r\n   * @param overwrite When a component with the same name has already been registered,\r\n   * if overwrite is true: overwrite the existing component with the new component and create a new\r\n   * provider with the new component. It can be useful in tests where you want to use different mocks\r\n   * for different tests.\r\n   * if overwrite is false: throw an exception\r\n   */\n\n\n  _createClass(ComponentContainer, [{\n    key: \"addComponent\",\n    value: function addComponent(component) {\n      var provider = this.getProvider(component.name);\n\n      if (provider.isComponentSet()) {\n        throw new Error(\"Component \".concat(component.name, \" has already been registered with \").concat(this.name));\n      }\n\n      provider.setComponent(component);\n    }\n  }, {\n    key: \"addOrOverwriteComponent\",\n    value: function addOrOverwriteComponent(component) {\n      var provider = this.getProvider(component.name);\n\n      if (provider.isComponentSet()) {\n        // delete the existing provider from the container, so we can register the new component\n        this.providers.delete(component.name);\n      }\n\n      this.addComponent(component);\n    }\n    /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */\n\n  }, {\n    key: \"getProvider\",\n    value: function getProvider(name) {\n      if (this.providers.has(name)) {\n        return this.providers.get(name);\n      } // create a Provider for a service that hasn't registered with Firebase\n\n\n      var provider = new Provider(name, this);\n      this.providers.set(name, provider);\n      return provider;\n    }\n  }, {\n    key: \"getProviders\",\n    value: function getProviders() {\n      return Array.from(this.providers.values());\n    }\n  }]);\n\n  return ComponentContainer;\n}();\n\nexport { Component, ComponentContainer, Provider };","map":{"version":3,"mappings":"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","names":["Deferred","Component","name","instanceFactory","type","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","mode","props","callback","DEFAULT_ENTRY_NAME","Provider","container","component","instances","Map","instancesDeferred","instancesOptions","onInitCallbacks","identifier","normalizedIdentifier","normalizeInstanceIdentifier","has","deferred","set","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","resolve","e","get","promise","options","_a","optional","Error","isComponentEager","entries","instanceDeferred","delete","services","Array","from","values","Promise","all","filter","service","map","INTERNAL","_delete","opts","isComponentSet","normalizedDeferredIdentifier","existingCallbacks","Set","add","existingInstance","callbacks","normalizeIdentifierForFactory","invokeOnInitCallbacks","undefined","ComponentContainer","providers","provider","getProvider","setComponent","addComponent"],"sources":["C:/Users/Ismail Saheb/Desktop/ams/node_modules/@firebase/component/dist/esm/index.esm2017.js"],"sourcesContent":["import { Deferred } from '@firebase/util';\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass Component {\r\n    /**\r\n     *\r\n     * @param name The public service name, e.g. app, auth, firestore, database\r\n     * @param instanceFactory Service factory responsible for creating the public interface\r\n     * @param type whether the service provided by the component is public or private\r\n     */\r\n    constructor(name, instanceFactory, type) {\r\n        this.name = name;\r\n        this.instanceFactory = instanceFactory;\r\n        this.type = type;\r\n        this.multipleInstances = false;\r\n        /**\r\n         * Properties to be added to the service namespace\r\n         */\r\n        this.serviceProps = {};\r\n        this.instantiationMode = \"LAZY\" /* LAZY */;\r\n        this.onInstanceCreated = null;\r\n    }\r\n    setInstantiationMode(mode) {\r\n        this.instantiationMode = mode;\r\n        return this;\r\n    }\r\n    setMultipleInstances(multipleInstances) {\r\n        this.multipleInstances = multipleInstances;\r\n        return this;\r\n    }\r\n    setServiceProps(props) {\r\n        this.serviceProps = props;\r\n        return this;\r\n    }\r\n    setInstanceCreatedCallback(callback) {\r\n        this.onInstanceCreated = callback;\r\n        return this;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\r\nclass Provider {\r\n    constructor(name, container) {\r\n        this.name = name;\r\n        this.container = container;\r\n        this.component = null;\r\n        this.instances = new Map();\r\n        this.instancesDeferred = new Map();\r\n        this.instancesOptions = new Map();\r\n        this.onInitCallbacks = new Map();\r\n    }\r\n    /**\r\n     * @param identifier A provider can provide mulitple instances of a service\r\n     * if this.component.multipleInstances is true.\r\n     */\r\n    get(identifier) {\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        if (!this.instancesDeferred.has(normalizedIdentifier)) {\r\n            const deferred = new Deferred();\r\n            this.instancesDeferred.set(normalizedIdentifier, deferred);\r\n            if (this.isInitialized(normalizedIdentifier) ||\r\n                this.shouldAutoInitialize()) {\r\n                // initialize the service if it can be auto-initialized\r\n                try {\r\n                    const instance = this.getOrInitializeService({\r\n                        instanceIdentifier: normalizedIdentifier\r\n                    });\r\n                    if (instance) {\r\n                        deferred.resolve(instance);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // when the instance factory throws an exception during get(), it should not cause\r\n                    // a fatal error. We just return the unresolved promise in this case.\r\n                }\r\n            }\r\n        }\r\n        return this.instancesDeferred.get(normalizedIdentifier).promise;\r\n    }\r\n    getImmediate(options) {\r\n        var _a;\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\r\n        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\r\n        if (this.isInitialized(normalizedIdentifier) ||\r\n            this.shouldAutoInitialize()) {\r\n            try {\r\n                return this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n            }\r\n            catch (e) {\r\n                if (optional) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\r\n            if (optional) {\r\n                return null;\r\n            }\r\n            else {\r\n                throw Error(`Service ${this.name} is not available`);\r\n            }\r\n        }\r\n    }\r\n    getComponent() {\r\n        return this.component;\r\n    }\r\n    setComponent(component) {\r\n        if (component.name !== this.name) {\r\n            throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);\r\n        }\r\n        if (this.component) {\r\n            throw Error(`Component for ${this.name} has already been provided`);\r\n        }\r\n        this.component = component;\r\n        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\r\n        if (!this.shouldAutoInitialize()) {\r\n            return;\r\n        }\r\n        // if the service is eager, initialize the default instance\r\n        if (isComponentEager(component)) {\r\n            try {\r\n                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\r\n            }\r\n            catch (e) {\r\n                // when the instance factory for an eager Component throws an exception during the eager\r\n                // initialization, it should not cause a fatal error.\r\n                // TODO: Investigate if we need to make it configurable, because some component may want to cause\r\n                // a fatal error in this case?\r\n            }\r\n        }\r\n        // Create service instances for the pending promises and resolve them\r\n        // NOTE: if this.multipleInstances is false, only the default instance will be created\r\n        // and all promises with resolve with it regardless of the identifier.\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            try {\r\n                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\r\n                const instance = this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n            catch (e) {\r\n                // when the instance factory throws an exception, it should not cause\r\n                // a fatal error. We just leave the promise unresolved.\r\n            }\r\n        }\r\n    }\r\n    clearInstance(identifier = DEFAULT_ENTRY_NAME) {\r\n        this.instancesDeferred.delete(identifier);\r\n        this.instancesOptions.delete(identifier);\r\n        this.instances.delete(identifier);\r\n    }\r\n    // app.delete() will call this method on every provider to delete the services\r\n    // TODO: should we mark the provider as deleted?\r\n    async delete() {\r\n        const services = Array.from(this.instances.values());\r\n        await Promise.all([\r\n            ...services\r\n                .filter(service => 'INTERNAL' in service) // legacy services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service.INTERNAL.delete()),\r\n            ...services\r\n                .filter(service => '_delete' in service) // modularized services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service._delete())\r\n        ]);\r\n    }\r\n    isComponentSet() {\r\n        return this.component != null;\r\n    }\r\n    isInitialized(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instances.has(identifier);\r\n    }\r\n    getOptions(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instancesOptions.get(identifier) || {};\r\n    }\r\n    initialize(opts = {}) {\r\n        const { options = {} } = opts;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\r\n        if (this.isInitialized(normalizedIdentifier)) {\r\n            throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);\r\n        }\r\n        if (!this.isComponentSet()) {\r\n            throw Error(`Component ${this.name} has not been registered yet`);\r\n        }\r\n        const instance = this.getOrInitializeService({\r\n            instanceIdentifier: normalizedIdentifier,\r\n            options\r\n        });\r\n        // resolve any pending promise waiting for the service instance\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            if (normalizedIdentifier === normalizedDeferredIdentifier) {\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n    /**\r\n     *\r\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n     *\r\n     * @param identifier An optional instance identifier\r\n     * @returns a function to unregister the callback\r\n     */\r\n    onInit(callback, identifier) {\r\n        var _a;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\r\n        existingCallbacks.add(callback);\r\n        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\r\n        const existingInstance = this.instances.get(normalizedIdentifier);\r\n        if (existingInstance) {\r\n            callback(existingInstance, normalizedIdentifier);\r\n        }\r\n        return () => {\r\n            existingCallbacks.delete(callback);\r\n        };\r\n    }\r\n    /**\r\n     * Invoke onInit callbacks synchronously\r\n     * @param instance the service instance`\r\n     */\r\n    invokeOnInitCallbacks(instance, identifier) {\r\n        const callbacks = this.onInitCallbacks.get(identifier);\r\n        if (!callbacks) {\r\n            return;\r\n        }\r\n        for (const callback of callbacks) {\r\n            try {\r\n                callback(instance, identifier);\r\n            }\r\n            catch (_a) {\r\n                // ignore errors in the onInit callback\r\n            }\r\n        }\r\n    }\r\n    getOrInitializeService({ instanceIdentifier, options = {} }) {\r\n        let instance = this.instances.get(instanceIdentifier);\r\n        if (!instance && this.component) {\r\n            instance = this.component.instanceFactory(this.container, {\r\n                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\r\n                options\r\n            });\r\n            this.instances.set(instanceIdentifier, instance);\r\n            this.instancesOptions.set(instanceIdentifier, options);\r\n            /**\r\n             * Invoke onInit listeners.\r\n             * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n             * while onInit listeners are registered by consumers of the provider.\r\n             */\r\n            this.invokeOnInitCallbacks(instance, instanceIdentifier);\r\n            /**\r\n             * Order is important\r\n             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n             * makes `isInitialized()` return true.\r\n             */\r\n            if (this.component.onInstanceCreated) {\r\n                try {\r\n                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\r\n                }\r\n                catch (_a) {\r\n                    // ignore errors in the onInstanceCreatedCallback\r\n                }\r\n            }\r\n        }\r\n        return instance || null;\r\n    }\r\n    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {\r\n        if (this.component) {\r\n            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\r\n        }\r\n        else {\r\n            return identifier; // assume multiple instances are supported before the component is provided.\r\n        }\r\n    }\r\n    shouldAutoInitialize() {\r\n        return (!!this.component &&\r\n            this.component.instantiationMode !== \"EXPLICIT\" /* EXPLICIT */);\r\n    }\r\n}\r\n// undefined should be passed to the service factory for the default instance\r\nfunction normalizeIdentifierForFactory(identifier) {\r\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\r\n}\r\nfunction isComponentEager(component) {\r\n    return component.instantiationMode === \"EAGER\" /* EAGER */;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass ComponentContainer {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.providers = new Map();\r\n    }\r\n    /**\r\n     *\r\n     * @param component Component being added\r\n     * @param overwrite When a component with the same name has already been registered,\r\n     * if overwrite is true: overwrite the existing component with the new component and create a new\r\n     * provider with the new component. It can be useful in tests where you want to use different mocks\r\n     * for different tests.\r\n     * if overwrite is false: throw an exception\r\n     */\r\n    addComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            throw new Error(`Component ${component.name} has already been registered with ${this.name}`);\r\n        }\r\n        provider.setComponent(component);\r\n    }\r\n    addOrOverwriteComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            // delete the existing provider from the container, so we can register the new component\r\n            this.providers.delete(component.name);\r\n        }\r\n        this.addComponent(component);\r\n    }\r\n    /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */\r\n    getProvider(name) {\r\n        if (this.providers.has(name)) {\r\n            return this.providers.get(name);\r\n        }\r\n        // create a Provider for a service that hasn't registered with Firebase\r\n        const provider = new Provider(name, this);\r\n        this.providers.set(name, provider);\r\n        return provider;\r\n    }\r\n    getProviders() {\r\n        return Array.from(this.providers.values());\r\n    }\r\n}\n\nexport { Component, ComponentContainer, Provider };\n"]},"metadata":{},"sourceType":"module"}